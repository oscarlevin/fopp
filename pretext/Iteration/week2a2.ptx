<section xml:id="iteration_chapter-assessment">
        <title>Chapter Assessment</title>
        

<exercise label="assess_ps_02_01">
    <statement>
        <p>Write one for loop to print out each character of the string <c>my_str</c> on a separate line.</p>

    </statement>
    <program xml:id="assess_ps_02_01_editor" interactive="activecode" language="python">

        <input>
my_str = "MICHIGAN"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
    self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
    self.assertIn("M\nI\nC\nH\nI\nG\nA\nN", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_02">
    <statement>
        <p>Write one for loop to print out each element of the list <c>several_things</c>. Then, write <em>another</em> for loop to print out the TYPE of each element of the list <c>several_things</c>. To complete this problem you should have written two different for loops, each of which iterates over the list <c>several_things</c>, but each of those 2 for loops should have a different result.</p>

    </statement>
    <program xml:id="assess_ps_02_02_editor" interactive="activecode" language="python">

        <input>
several_things = ["hello", 2, 4, 6.0, 7.5, 234352354, "the end", "", 99]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

  def test_output(self):
      self.assertIn('for', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
      str1 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'float'&gt;\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n&lt;class 'str'&gt;\n&lt;class 'int'&gt;"
      str2 = "hello\n2\n4\n6.0\n7.5\n234352354\nthe end\n\n99\n&lt;type 'str'&gt;\n&lt;type 'int'&gt;\n&lt;type 'int'&gt;\n&lt;type 'float'&gt;\n&lt;type 'float'&gt;\n&lt;type 'int'&gt;\n&lt;type 'str'&gt;\n&lt;type 'str'&gt;\n&lt;type 'int'&gt;"
      self.assertTrue(str1 in self.getOutput() or str2 in self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_03">
    <statement>
        <p>Write code that uses iteration to print out <term>the length</term> of each element of the list stored in <c>str_list</c>.</p>

    </statement>
    <program xml:id="assess_ps_02_03_editor" interactive="activecode" language="python">

        <input>
str_list = ["hello", "", "goodbye", "wonderful", "I love Python"]

# Write your code here.
=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def test_output(self):
        self.assertIn("for", self.getEditorText(), "Testing whether you used a for loop (Don't worry about actual and expected values).")
        self.assertIn("5\n0\n7\n9\n13", self.getOutput(), "Testing output (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_04">
    <statement>
        <p>Write a program that uses the turtle module <term>and</term> a for loop to draw something. It doesn't have to be complicated, but draw something different than we have done in the past. (Hint: if you are drawing something complicated, it could get tedious to watch it draw over and over. Try setting <c>.speed(10)</c> for the turtle to draw fast, or <c>.speed(0)</c> for it to draw super fast with no animation.)</p>

    </statement>
    <program xml:id="assess_ps_02_04_editor" interactive="activecode" language="python">

        <input>
import turtle
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_05">
    <statement>
        <p>Write code to count the number of characters in <c>original_str</c> using the accumulation pattern and assign the answer to a variable <c>num_chars</c>. Do NOT use the <c>len</c> function to solve the problem (if you use it while you are working on this problem, comment it out afterward!)</p>

    </statement>
    <program xml:id="assess_ps_02_05_editor" interactive="activecode" language="python">

        <input>
original_str = "The quick brown rhino jumped over the extremely lazy fox."


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(num_chars, len(original_str), "Testing whether num_chars_sent has the correct value")
       self.assertNotIn('len', self.getEditorText(), "Testing that you are not including the len function in your code. (Don't worry about Actual and Expected Values.)")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_07">
    <statement>
        <p><c>addition_str</c> is a string with a list of numbers separated by the <c>+</c> sign. Write code that uses the accumulation pattern to take the sum of all of the numbers and assigns it to <c>sum_val</c> (an integer). (You should use the <c>.split("+")</c> function to split by <c>"+"</c> and <c>int()</c> to cast to an integer).</p>

    </statement>
    <program xml:id="assess_ps_02_07_editor" interactive="activecode" language="python">

        <input>
addition_str = "2+5+10+20"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(sum_val, 37, "Testing whether sum_val has the correct value")
       self.assertIn('split', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
       self.assertIn('int', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_08">
    <statement>
        <p><c>week_temps_f</c> is a string with a list of fahrenheit temperatures separated by the <c>,</c> sign. Write code that uses the accumulation pattern to compute the <term>average</term> (sum divided by number of items) and assigns it to <c>avg_temp</c>. Do not hard code your answer (i.e., make your code compute both the sum or the number of items in <c>week_temps_f</c>) (You should use the <c>.split(",")</c> function to split by <c>","</c> and <c>float()</c> to cast to a float).</p>

    </statement>
    <program xml:id="assess_ps_02_08_editor" interactive="activecode" language="python">

        <input>
week_temps_f = "75.1,77.7,83.2,82.5,81.0,79.5,85.7"


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(avg_temp, 80.67142857142858, 7, "Testing that avg_temp has the correct value")
        self.assertIn('split', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")
        self.assertIn('float', self.getEditorText(), "Testing your code (Don't worry about actual and expected values).")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps_02_09">
    <statement>
        <p>Write code to create a list of numbers from 0 to 67 and assign that list to the variable <c>nums</c>. Do not hard code the list.</p>

    </statement>
    <program xml:id="assess_ps_02_09_editor" interactive="activecode" language="python">

        <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(nums, list(range(68)), "Testing that nums is a list that contains the correct elements.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>

