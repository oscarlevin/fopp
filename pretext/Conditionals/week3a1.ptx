<section xml:id="conditionals_chapter-assessment">
        <title>Chapter Assessment</title>
        <p><term>Check your understanding</term></p>

<exercise label="assess_ps3_1_1_1">
    <statement>
        <p><c>rainfall_mi</c> is a string that contains the average number of inches of rainfall in Michigan for every month (in inches) with every month separated by a comma.
            Write code to compute the number of months that have more than 3 inches of rainfall. Store the result in the variable <c>num_rainy_months</c>.
            In other words, count the number of items with values <c>&gt; 3.0</c>.</p>
        <p>Hard-coded answers will receive no credit.</p>

    </statement>
    <program xml:id="assess_ps3_1_1_1_editor" interactive="activecode" language="python">

        <input>
rainfall_mi = "1.65, 1.46, 2.05, 3.03, 3.35, 3.46, 2.83, 3.23, 3.5, 2.52, 2.8, 1.85"
=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn('for', self.getEditorText(), "Testing that your code has a for loop (Don't worry about actual and expected values).")
        self.assertEqual(num_rainy_months, 5, "Testing that num_rainy_months has the right value")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps3_1_1_2">
    <statement>
        <p>The variable <c>sentence</c> stores a string. Write code to determine how many words in <c>sentence</c> start and end with the same letter, including one-letter words.
            Store the result in the variable <c>same_letter_count</c>.</p>
        <p>Hard-coded answers will receive no credit.</p>

    </statement>
    <program xml:id="assess_ps3_1_1_2_editor" interactive="activecode" language="python">

        <input>
sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"

# Write your code here.


        </input>
<tests>

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(same_letter_count, 2, "Checking that same_letter_count has the correct value")
        self.assertIn('for ', self.getEditorText(), "Testing that your code has a for loop")
myTests().main()
</tests>

    </program>
</exercise>

<exercise label="assess_ps3_1_1_3">
    <statement>
        <p>Write code to count the number of strings in list <c>items</c> that have the character <c>w</c> in it. Assign that number to the variable <c>acc_num</c>.</p>
        <p>HINT 1: Use the accumulation pattern!</p>
        <p>HINT 2: the <c>in</c> operator checks whether a substring is present in a string.</p>
        <p>Hard-coded answers will receive no credit.</p>

    </statement>
    <program xml:id="assess_ps3_1_1_3_editor" interactive="activecode" language="python">

        <input>
items = ["whirring", "wow!", "calendar", "wry", "glass", "", "llama","tumultuous","owing"]


=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn(' in ', self.getEditorText(), "Testing that you are using the in operator.")
        self.assertEqual(acc_num, 4, "Testing that acc_num has been set to the number of strings that have 'w' in them.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps3_1_1_4">
    <statement>
        <p>Write code that counts the number of words in <c>sentence</c> that contain <em>either</em> an <q>a</q> or an <q>e</q>. Store the result in the variable <c>num_a_or_e</c>.</p>
        <p>Note 1: be sure to not double-count words that contain both an a and an e.</p>
        <p>HINT 1: Use the <c>in</c> operator.</p>
        <p>HINT 2: You can either use <c>or</c> or <c>elif</c>.</p>
        <p>Hard-coded answers will receive no credit.</p>

    </statement>
    <program xml:id="assess_ps3_1_1_4_editor" interactive="activecode" language="python">

        <input>
sentence = "python is a high level general purpose programming language that can be applied to many different classes of problems."


=====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertIn(' in ', self.getEditorText(), "Testing that you are using the in operator.")
        self.assertEqual(num_a_or_e, 14, "Testing that num_a_or_e has been set to the correct number.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ps3_1_1_5">
    <statement>
        <p>Write code that will count the number of vowels in the sentence <c>s</c> and assign the result to the variable <c>num_vowels</c>. For this problem, vowels are only a, e, i, o, and u. Hint: use the <c>in</c> operator with <c>vowels</c>.</p>

    </statement>
    <program xml:id="assess_ps3_1_1_5_editor" interactive="activecode" language="python">

        <input>
s = "singing in the rain and playing in the rain are two entirely different situations but both can be fun"
vowels = ['a','e','i','o','u']

# Write your code here.


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
       self.assertEqual(num_vowels, 32, "testing whether num_vowels is set correctly")

    def testOneA(self):
       self.assertIn('for', self.getEditorText(), "Testing that you are using a for loop.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac3_1_1_6">
    <statement>
        <p>Create one conditional so that if <q>Friendly</q> is in <c>w</c>, then <q>Friendly is here!</q> should be assigned to the variable <c>wrd</c>. If it's not, check if <q>Friend</q> is in <c>w</c>. If so, the string <q>Friend is here!</q> should be assigned to the variable <c>wrd</c>, otherwise <q>No variation of friend is in here.</q> should be assigned to the variable <c>wrd</c>. (Also consider: does the order of your conditional statements matter for this problem? Why?)</p>

    </statement>
    <program xml:id="assess_ac3_1_1_6_editor" interactive="activecode" language="python">

        <input>
w = "Friendship is a wonderful human experience!"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(wrd, "Friend is here!", "Testing the value of wrd")
      self.assertIn("else", self.getEditorText(), "Checking that you used an else clause.")
      self.assertIn("elif", self.getEditorText(), "Checking that you used an elif clause.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac3_1_1_7">
    <statement>
        <p>We have written conditionals for you to use. Create the variable x and assign it some integer so that at the end of the code, <c>output</c> will be assigned the string <c>"Consistently working"</c>.</p>

    </statement>
    <program xml:id="assess_ac3_1_1_7_editor" interactive="activecode" language="python">

        <input>
if x &gt;= 10:
    output = "working"
else:
    output = "Still working"
if x &gt; 12:
    output = "Always working"
elif x &lt; 7:
    output = "Forever working"
else:
    output = "Consistently working"

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(output, "Consistently working", "Testing the value of output")
   def testTwo(self):
      self.assertIn(x, [7,8,9,10,11,12], "Testing that x was assigned a correct number" )

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac3_1_1_8">
    <statement>
        <p>Write code so that if <c>"STATS 250"</c> is in the list <c>schedule</c>, then the string <c>"You could be in Information Science!"</c> is assigned to the variable <c>resp</c>. Otherwise, the string <c>"That's too bad."</c> should be assigned to the variable <c>resp</c>.</p>

    </statement>
    <program xml:id="assess_ac3_1_1_8_editor" interactive="activecode" language="python">

        <input>
schedule = ["SI 106", "STATS 250", "SI 110", "ENGLISH 124/125"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(resp, "You could be in Information Science!", "Testing the value of resp given the schedule list provided.")
      self.assertIn("if", self.getEditorText(), "Testing that you used an if clause.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac3_1_1_9">
    <statement>
        <p>Create the variable <c>z</c> whose value is <c>30</c>. Write code to see if <c>z</c> is greater than <c>y</c>. If so, add 5 to <c>y</c>'s value, otherwise do nothing. Then, multiply <c>z</c> and <c>y</c>, and assign the resulting value to the variable <c>x</c>.</p>

    </statement>
    <program xml:id="assess_ac3_1_1_9_editor" interactive="activecode" language="python">

        <input>
y = 22

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(x, 810, "Testing the value of x")
   def testTwo(self):
      self.assertEqual(z, 30, "Testing the value of z.")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>

<exercise label="assess_ac3_1_1_10">
    <statement>
        <p>For each string in <c>wrd_lst</c>, find the number of characters in the string. If the number of characters is less than 6, add 1 to <c>accum</c> so that in the end, <c>accum</c> will contain an integer representing the total number of words in the list that have fewer than 6 characters.</p>

    </statement>
    <program xml:id="assess_ac3_1_1_10_editor" interactive="activecode" language="python">

        <input>
wrd_lst = ["Hello", "activecode", "Java", "C#", "Python", "HTML and CSS", "Javascript", "Swift", "php"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(accum, 5, "Testing the value of accum")
      self.assertIn('for ', self.getEditorText(), "Testing that your code has a for loop")

myTests().main()
        </input>
<tests>


</tests>

    </program>
</exercise>
    </section>

